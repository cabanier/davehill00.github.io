{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/bjs-objcount.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;AChFA,uDAAuD;AACvD,gDAAgD;;AAEhD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,gCAAgC,gBAAgB;;;AAGhD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main-bjs-objcount.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/bjs-objcount.js\");\n","\n\nconst canvas = document.getElementById(\"renderCanvas\"); // Get the canvas element\nconst engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine\n\nlet i;\nconst kSpread = 20;\n\nvar drawGroups = new Array();\nconst groupSize = 10;\n//var currentGroup = new THREE.Group();\nvar groupCounter = 0;\nvar currentGroup = null;\nvar xr = null;\nvar leftController = null;\nvar rightController = null;\nvar rightTrigger = null;\nvar leftTrigger = null;\n\n    var materialSortFrontToBackCompare = function (a, b) {\n        // debugger;\n        if (a.getRenderingMesh().occlusionQueryAlgorithmType < b.getRenderingMesh().occlusionQueryAlgorithmType)\n            return - 1;\n\n        if (a.getRenderingMesh().occlusionQueryAlgorithmType > b.getRenderingMesh().occlusionQueryAlgorithmType)\n            return  1;\n\n\n        if (a.getMaterial().id < b.getMaterial().id)\n            return -1;\n\n        if (a.getMaterial().id > b.getMaterial().id)\n            return 1;\n\n        if (a.getRenderingMesh().geometry.id < b.getRenderingMesh().geometry.id)\n            return -1;\n\n        if (a.getRenderingMesh().geometry.id > b.getRenderingMesh().geometry.id)\n            return 1;\n\n        // debugger;\n        // Then distance to camera\n        if (a._distanceToCamera < b._distanceToCamera) {\n            return -1;\n        }\n        if (a._distanceToCamera > b._distanceToCamera) {\n            return 1;\n        }\n\n        return 0;\n    };\n\nvar createScene = async function () {\n\n    var scene = new BABYLON.Scene(engine);\n    scene.clearColor.set(0.2, 0.2, 0.2, 1.0);\n    scene.setRenderingOrder(0, materialSortFrontToBackCompare);\n\n    var camera = new BABYLON.FreeCamera(\"camera1\", new BABYLON.Vector3(0, 5, -10), scene);\n    camera.setTarget(BABYLON.Vector3.Zero());\n    camera.attachControl(canvas, true);\n    var dirLight = new BABYLON.DirectionalLight(\"dirLight\", new BABYLON.Vector3(2,-2,1), scene);\n    dirLight.intensity = 0.75;\n    currentGroup = new BABYLON.Node(\"group\" + drawGroups.length, scene);\n\n    var cubeMaterials = [new BABYLON.StandardMaterial(\"mat0\", scene), new BABYLON.StandardMaterial(\"mat1\", scene) ];\n    cubeMaterials[0].diffuseColor = new BABYLON.Color3(1, 0.5, 0.1);\n    cubeMaterials[1].diffuseColor = new BABYLON.Color3(0.4, 0.4, 0.4);\n\n    for (i = 0; i < kSpread * kSpread; i++) {\n        let cube = new BABYLON.Mesh.CreateBox(\"cube\"+i, 1.0);\n        cube.material = cubeMaterials[i%2];\n        let row = i % kSpread;\n        let col = Math.floor(i / kSpread);\n        cube.position.set(-kSpread + row * 2.0, -kSpread + col * 2.0, 3 * kSpread);\n        cube.rotation.x = 0.707;\n        cube.rotation.y = 0.707;\n        cube.setParent(currentGroup);\n        //currentGroup.addChild(cube);\n        groupCounter++;\n\n        if (groupCounter == groupSize)\n        {\n            currentGroup.setEnabled(false);\n            drawGroups.push(currentGroup);\n            currentGroup = new BABYLON.Node(\"group\" + drawGroups.length, scene);\n            groupCounter = 0;\n        }\n    }\n    if (currentGroup.getChildren().length != 0)\n    {\n        currentGroup.setEnabled(false);\n    }\n\n    var firstInvisible = -1;\n    initVisibility((kSpread*kSpread*0.25)/groupSize);\n\n\n\n\n    //const env = scene.createDefaultEnvironment();\n\n    xr = await scene.createDefaultXRExperienceAsync({\n        //floorMeshes: [env.ground]\n    });\n\n    xr.input.onControllerAddedObservable.add((inputSource) => {\n        inputSource.onMotionControllerInitObservable.add((controller) => {\n            if (controller.handedness == \"right\")\n            {\n                rightController = controller;\n                rightTrigger = rightController.getComponent(\"xr-standard-trigger\");\n            }\n            else\n            {\n                leftController = controller;\n                leftTrigger = leftController.getComponent(\"xr-standard-trigger\");\n            }\n        });\n    });\n\n    return scene;\n};\n\n// Add your code here matching the playground format\nlet scene = null;\ncreateScene().then((result) => {scene = result;})\n\n\n//GUI\nvar advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\n\nvar fpsText = new BABYLON.GUI.TextBlock();\nfpsText.text = \"FPS\";\nfpsText.color = \"green\";\nfpsText.fontSize = 30;\nfpsText.paddingTop = 10;\nfpsText.paddingLeft = 10;\n\nadvancedTexture.addControl(fpsText);\n\nfpsText.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\nfpsText.textVerticalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\n\n\n\n\ndocument.onkeydown = function(e) {\n    switch(e.key)\n    {\n        case \",\":\n            updateVisibility(false);\n            break;\n        case \".\":\n            updateVisibility(true);\n            break;\n    }\n};\n\n\n// Register a render loop to repeatedly render the scene\n\nvar endOfLastFrame = 0.0;\nvar startOfCurrentFrame = 0.0;\nvar averageDelta = 0.0;\nconst kFpsSmoothing = 0.10;\nvar curMaxDelta = 0.0;\nvar expiryMaxDelta = performance.now();\nvar curMinHertz = 90.0;\nvar expiryMinHertz = performance.now();\nconst kMaxPersist = 2000.0;\n\nengine.runRenderLoop(function () {\n        if (scene != null)\n        {\n            endOfLastFrame = performance.now();\n            let delta = endOfLastFrame - startOfCurrentFrame;\n            if (delta > curMaxDelta || endOfLastFrame > expiryMaxDelta) {\n                curMaxDelta = delta;\n                expiryMaxDelta = endOfLastFrame + kMaxPersist;\n            }\n            averageDelta = (delta * kFpsSmoothing) + (averageDelta * (1.0 - kFpsSmoothing));\n            let hertz = 1000.0 / averageDelta;\n            if (hertz < curMinHertz || endOfLastFrame > expiryMinHertz) {\n                curMinHertz = hertz;\n                expiryMinHertz = endOfLastFrame + kMaxPersist;\n            }\n\n            startOfCurrentFrame = performance.now();\n            if (fpsText) {\n                fpsText.text =\n                    (firstInvisible * groupSize) + \" objs\\n\" +\n                    delta.toFixed(1) + \"(\" + curMaxDelta.toFixed(1) + \") ms\\n\" +\n                    (1000.0 / averageDelta).toFixed(0) + \"(\" + curMinHertz.toFixed(0) + \") Hz\";\n            }\n\n\n            updateInput();\n\n            scene.render();\n        }\n});\n\n\nfunction initVisibility(numVisible)\n{\n    firstInvisible = 0;\n    for(firstInvisible = 0; firstInvisible < numVisible; firstInvisible++)\n    {\n        if (firstInvisible >= drawGroups.length)\n            break;\n\n        drawGroups[firstInvisible].setEnabled(true);\n    }\n}\n\nfunction updateVisibility(increment)\n{\n    if (increment)\n    {\n        if (firstInvisible < drawGroups.length)\n        {\n            drawGroups[firstInvisible].setEnabled(true);\n            firstInvisible++;\n        }\n    }\n    else\n    {\n        if (firstInvisible > 0)\n        {\n            firstInvisible--;\n            drawGroups[firstInvisible].setEnabled(false);\n        }\n    }\n}\n\nfunction updateInput()\n{\n    if (rightTrigger != null && rightTrigger.hasChanges)\n    {\n        if (rightTrigger.changes.pressed.previous && !rightTrigger.changes.pressed.current)\n        {\n            updateVisibility(true);\n        }\n    }\n    if (leftTrigger != null && leftTrigger.hasChanges)\n    {\n        if (leftTrigger.changes.pressed.previous && !leftTrigger.changes.pressed.current)\n        {\n            updateVisibility(false);\n        }\n    }\n}\n"],"sourceRoot":""}